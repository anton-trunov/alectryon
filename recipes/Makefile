PYTHON ?= python3

alectryon := ../alectryon.py --output-directory output --no-version-numbers --traceback
minimal := $(PYTHON) -m alectryon.minimal

assets := alectryon.css alectryon.js
all := .version-info \
	plain.v.html literate.v.html \
	coqdoc.v.html coqdoc.html \
	literate.html custom_highlighting.html document.html hyps.html mathjax.html \
	document.minimal.html document.v literate.v.rst \
	fragments.io.json fragments.snippets.html \
	fragments.snippets.tex latex.snippets.tex \
	plain.lean.html lean3-tutorial.html \
	api.out

all: $(patsubst %,output/%,$(all) $(assets)) sphinx/_build/html/index.html;

output:
	mkdir $@

output/.version-info: | output
	@echo "Coq: $$(coqc -v)" > $@
	@echo "Pygments: $$($(PYTHON) -c 'import pygments; print(pygments.__version__)')" >> $@
	@echo "Docutils: $$($(PYTHON) -c 'import docutils; print(docutils.__version__)')" >> $@
	@echo "Sphinx: $$($(PYTHON) -c 'import sphinx; print(sphinx.__version__)')" >> $@

# Coq → HTML
output/plain.v.html: plain.v | output
	$(alectryon) --frontend coq $<
output/literate.v.html: literate.v | output
	$(alectryon) --frontend coq $<
output/coqdoc.v.html: coqdoc.v | output
	$(alectryon) --frontend coq $<

# Coqdoc → HTML
output/coqdoc.html: coqdoc.v | output
	$(alectryon) $< --frontend coqdoc

# Coq+reST → HTML
output/literate.html: literate.v | output
	$(alectryon) $<
output/custom_highlighting.html: custom_highlighting.v | output
	$(alectryon) $<

# reST+Coq → HTML
output/document.html: document.v.rst | output
	$(alectryon) $<
output/hyps.html: hyps.rst | output
	$(alectryon) $<
output/mathjax.html: mathjax.rst | output
	$(alectryon) $<

# Minimal reST+Coq → HTML
output/document.minimal.html: document.v.rst | output
	cd ..; $(minimal) recipes/$< recipes/$@

# reST+Coq → Coq+reST
output/document.v: document.v.rst | output
	$(alectryon) $< -o $@

# Coq+reST → reST+Coq
output/literate.v.rst: literate.v | output
	$(alectryon) $< -o $@

# JSON → JSON
output/fragments.io.json: fragments.v.json | output
	$(alectryon) $<

# JSON → HTML snippets
output/fragments.snippets.html: fragments.v.json | output
	$(alectryon) $< -o $@

# JSON → Latex snippets
output/fragments.snippets.tex: fragments.v.json | output
	$(alectryon) $< -o $@

# Coq → Latex snippets
output/latex.snippets.tex: latex.v | output
	$(alectryon) --frontend coq $< -o $@

# Lean3 → HTML
output/plain.lean.html: plain.lean | output
	$(alectryon) --frontend lean3 $<

# reST+Lean3 → HTML
output/lean3-tutorial.html: lean3-tutorial.rst | output
	$(alectryon) $<

# Sphinx
sphinx/_build/html/index.html: sphinx/index.rst
	+$(MAKE) -C sphinx html

# API
output/api.out: api.py
	$(PYTHON) $< > $@

output/alectryon%css output/alectryon%js: FORCE
	cp --link --force $(patsubst %,../alectryon/assets/%,$(assets)) output/
FORCE:

clean:
	rm -rf output/ sphinx/_build sphinx/*.cache

.PHONY: clean assets
